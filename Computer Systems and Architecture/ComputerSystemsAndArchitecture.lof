\contentsline {figure}{\numberline {1}{\ignorespaces The von Neumann Architecture}}{1}
\contentsline {figure}{\numberline {2}{\ignorespaces The MIPS processor}}{4}
\contentsline {figure}{\numberline {3}{\ignorespaces The conventions of use for all registers in the MIPS architecture}}{7}
\contentsline {figure}{\numberline {4}{\ignorespaces MIPS instruction format for register operations}}{7}
\contentsline {figure}{\numberline {5}{\ignorespaces MIPS instruction format for load/store operations}}{7}
\contentsline {figure}{\numberline {6}{\ignorespaces Datapath elements for instruction fetch}}{8}
\contentsline {figure}{\numberline {7}{\ignorespaces We have integrated an adder to increment the PC}}{9}
\contentsline {figure}{\numberline {8}{\ignorespaces Registers and their input/output ports}}{9}
\contentsline {figure}{\numberline {9}{\ignorespaces The ALU and it's input/output ports}}{10}
\contentsline {figure}{\numberline {10}{\ignorespaces (Left) Circuit symbol for an NMOS transistor. (Right) Circuit symbol for a PMOS transistor}}{10}
\contentsline {figure}{\numberline {11}{\ignorespaces The logical operator \textbf {NOT} built from transistors}}{10}
\contentsline {figure}{\numberline {12}{\ignorespaces (Left) A \textbf {NAND} gate built from four transistors. (Right) A \textbf {NOR} gate built from four transistors}}{11}
\contentsline {figure}{\numberline {13}{\ignorespaces Truth table for a two input decoder}}{11}
\contentsline {figure}{\numberline {14}{\ignorespaces A 2-4 decoder built from logic gates}}{12}
\contentsline {figure}{\numberline {15}{\ignorespaces Truth table for a 2-1 multiplexer}}{12}
\contentsline {figure}{\numberline {16}{\ignorespaces A 2-1 multiplexer built from logic gates}}{12}
\contentsline {figure}{\numberline {17}{\ignorespaces Logic gates which implemet a half-adder}}{13}
\contentsline {figure}{\numberline {18}{\ignorespaces A full-adder built from two half adders and an \textbf {XOR} gate}}{13}
\contentsline {figure}{\numberline {19}{\ignorespaces A simple ALU capable of performing addition, bitwise-AND and bitwise-OR operations}}{14}
